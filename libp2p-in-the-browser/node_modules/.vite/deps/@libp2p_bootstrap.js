import {
  CustomEvent,
  EventEmitter,
  symbol
} from "./chunk-5CSHHXSA.js";
import {
  peerIdFromString
} from "./chunk-WOWDF62C.js";
import {
  P2P,
  multiaddr
} from "./chunk-EWRST3T5.js";
import "./chunk-RZC6SFPH.js";
import {
  logger
} from "./chunk-WITB7XN5.js";

// node_modules/@libp2p/bootstrap/dist/src/index.js
var log = logger("libp2p:bootstrap");
var DEFAULT_BOOTSTRAP_TAG_NAME = "bootstrap";
var DEFAULT_BOOTSTRAP_TAG_VALUE = 50;
var DEFAULT_BOOTSTRAP_TAG_TTL = 12e4;
var DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT = 1e3;
var Bootstrap = class extends EventEmitter {
  constructor(components, options = { list: [] }) {
    if (options.list == null || options.list.length === 0) {
      throw new Error("Bootstrap requires a list of peer addresses");
    }
    super();
    this.components = components;
    this.timeout = options.timeout ?? DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT;
    this.list = [];
    for (const candidate of options.list) {
      if (!P2P.matches(candidate)) {
        log.error("Invalid multiaddr");
        continue;
      }
      const ma = multiaddr(candidate);
      const peerIdStr = ma.getPeerId();
      if (peerIdStr == null) {
        log.error("Invalid bootstrap multiaddr without peer id");
        continue;
      }
      const peerData = {
        id: peerIdFromString(peerIdStr),
        multiaddrs: [ma],
        protocols: []
      };
      this.list.push(peerData);
    }
    this._init = options;
  }
  get [symbol]() {
    return true;
  }
  get [Symbol.toStringTag]() {
    return "@libp2p/bootstrap";
  }
  isStarted() {
    return Boolean(this.timer);
  }
  start() {
    if (this.isStarted()) {
      return;
    }
    log("Starting bootstrap node discovery, discovering peers after %s ms", this.timeout);
    this.timer = setTimeout(() => {
      void this._discoverBootstrapPeers().catch((err) => {
        log.error(err);
      });
    }, this.timeout);
  }
  async _discoverBootstrapPeers() {
    if (this.timer == null) {
      return;
    }
    for (const peerData of this.list) {
      await this.components.peerStore.tagPeer(peerData.id, this._init.tagName ?? DEFAULT_BOOTSTRAP_TAG_NAME, {
        value: this._init.tagValue ?? DEFAULT_BOOTSTRAP_TAG_VALUE,
        ttl: this._init.tagTTL ?? DEFAULT_BOOTSTRAP_TAG_TTL
      });
      if (this.timer == null) {
        return;
      }
      this.dispatchEvent(new CustomEvent("peer", { detail: peerData }));
    }
  }
  stop() {
    if (this.timer != null) {
      clearTimeout(this.timer);
    }
    this.timer = void 0;
  }
};
Bootstrap.tag = "bootstrap";
function bootstrap(init) {
  return (components) => new Bootstrap(components, init);
}
export {
  bootstrap
};
//# sourceMappingURL=@libp2p_bootstrap.js.map
